pipeline {
    agent any
    triggers {
        GenericTrigger(
            genericHeaderVariables: [
                [key: 'X-GitHub-Event', regexpFilter: '']
            ],
            genericVariables: [
                [key: 'ref', value: '$.ref', expressionType: 'JSONPath', regexpFilter: '', defaultValue: ''],
                [key: 'action', value: '$.action', expressionType: 'JSONPath', regexpFilter: '', defaultValue: '']
            ],
            // causeString: 'Triggered on $ref',
            regexpFilterText: '${x_github_event}&&${ref}',
            regexpFilterExpression: 'push&&refs/heads/main',
            token: 'RO3bV0fpMs',
            printContributedVariables: true,
            printPostContent: true,
        )
    }
    environment {
        SAMPLE_ID = ''
        CREDENTIALS_ID = "devops-${ref.replaceAll('refs/heads/', '')}"
        AWS_SECRET_ACCESS_KEY = ''
        AWS_DEFAULT_REGION = ''
    }
    stages {
        stage('Pipeline 0: Get account AWS by ENV') {
            steps {
                script {
                    echo CREDENTIALS_ID
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: CREDENTIALS_ID,
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        
                    }
                }
            }
        }
        stage('Pipeline 1: GIT Checkout SCM') {
            steps {
                checkout([$class: 'GitSCM',
                  branches: [[name: ref]],
                  userRemoteConfigs: [[url: 'https://github.com/minhquoc1299/dc11-dot-quoctran-w4-terraform.git',
                                      credentialsId: 'github-account']]])
            }
        }

        stage('Pipeline 2: Terraform Apply') {
            steps {
                script {
                    sh 'terraform init -no-color'
                    sh 'terraform workspace select main -no-color'
                    sh 'terraform apply -auto-approve -no-color'
                }
            }
        }
    }

    post {
        failure {
            mail(
                bcc: '',
                body: "Dear Manager,\n\nTerraform deploy failed. Please check the build logs for details.\n\nThanks,\nJenkins System",
                cc: 'tmquoc@tma.com.vn',
                from: '',
                replyTo: '',
                subject: '[PR] Terraform PR Build Fail',
                to: 'manager@yopmail.com'
            )
        }
    }
}
