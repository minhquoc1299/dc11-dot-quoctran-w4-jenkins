pipeline {
    agent any
    triggers {
        GenericTrigger(
            genericHeaderVariables: [
                [key: 'X-GitHub-Event', regexpFilter: '']
            ],
            genericVariables: [
                [key: 'pr_ref', value: '$.pull_request.head.ref', expressionType: 'JSONPath', regexpFilter: '', defaultValue: ''],
                [key: 'target_ref', value: '$.pull_request.base.ref', expressionType: 'JSONPath', regexpFilter: '', defaultValue: ''],
                [key: 'pr_sha', value: '$.pull_request.head.sha', expressionType: 'JSONPath', regexpFilter: '', defaultValue: ''],
                [key: 'pr_url', value: '$.pull_request.html_url', expressionType: 'JSONPath', regexpFilter: '', defaultValue: ''],
                [key: 'url_commit', value: '$.repository.commits_url', expressionType: 'JSONPath', regexpFilter: '', defaultValue: ''],
                [key: 'action', value: '$.action', expressionType: 'JSONPath', regexpFilter: '', defaultValue: ''],

            ],
            // causeString: 'Triggered on $ref',
            regexpFilterText: '${x_github_event}&&${target_ref}&&${action}',
            regexpFilterExpression: 'pull_request&&main&&opened',
            token: 'RO3bV0fpMs',
            printContributedVariables: true,
            printPostContent: true,
        )
    }
    environment {
        PR_USER_EMAIL = ''
        PR_USER_FULL_NAME = ''
        AWS_ACCESS_KEY_ID = ''
        AWS_SECRET_ACCESS_KEY = ''
        AWS_DEFAULT_REGION = ''
    }
    stages {
        stage('Pipeline 0: Get account AWS by ENV') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'devops-${pr_ref.replaceAll('refs/heads/', '')}',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    echo 'CREDENTIALS_ID: ${CREDENTIALS_ID}'
                    sh 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}'
                    echo 'AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}'
                    sh 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}'
                    echo 'AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}'
                    sh 'AWS_DEFAULT_REGION=ap-southeast-1'
                }
            }
        }
        stage('Pipeline 1: User commit and pull request') {
            steps {
                script {
                    // https://api.github.com/repos/minhquoc1299/dc11-dot-quoctran-w4-terraform/commits{/sha}
                    def response = httpRequest(
                        url: url_commit.replaceAll("\\{\\/sha\\}", "/${pr_sha}"),
                        httpMode: 'GET',
                        acceptType: 'APPLICATION_JSON'
                    )

                    // Check if the request was successful (HTTP status code 200)
                    if (response.status == 200) {
                        def jsonResponse = readJSON text: response.content
                        PR_USER_EMAIL = jsonResponse.commit.committer.email
                        PR_USER_FULL_NAME = jsonResponse.commit.committer.name
                    } else {
                        error "API committer request failed with status ${response.status}"
                    }
                }
            }
        }

        stage('Pipeline 2: GIT Checkout SCM') {
            steps {
                checkout([$class: 'GitSCM',
                  branches: [[name: pr_ref]],
                  userRemoteConfigs: [[url: 'https://github.com/minhquoc1299/dc11-dot-quoctran-w4-terraform.git',
                                      credentialsId: 'github-account']]])
            }
        }

        stage('Pipeline 3: Terraform Validate') {
            steps {
                script {
                    sh 'terraform workspace select main -no-color'
                    sh 'terraform init -no-color'
                    sh 'terraform fmt -no-color'
                    sh 'terraform validate -no-color'
                }
            }
        }

        stage('Pipeline 4: Terraform Plan & Send Mail') {
            steps {
                script {
                    def TERRAFORM_PLAN = sh(script: 'terraform plan -no-color', returnStdout: true)
                    mail(
                        bcc: '',
                        body: "Dear ${PR_USER_FULL_NAME},\n\nTerraform plan. Please see the build plan bellow:\n${TERRAFORM_PLAN}\nPull request: ${pr_url}\n\nThanks,\nJenkins System",
                        cc: 'tmquoc@tma.com.vn',
                        from: '',
                        replyTo: '',
                        subject: '[PR] Terraform PR Build Plan',
                        to: PR_USER_EMAIL
                    )
                }
            }
        }
    }

    post {
        failure {
            mail(
                bcc: '',
                body: "Dear ${PR_USER_FULL_NAME},\n\nTerraform plan failed. Please check the build logs for details.\nPull request: ${pr_url}\n\nThanks,\nJenkins System",
                cc: 'tmquoc@tma.com.vn',
                from: '',
                replyTo: '',
                subject: '[PR] Terraform PR Build Fail',
                to: PR_USER_EMAIL
            )
        }
    }
}
